/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author hakan.sanli
 */
public class Jukebox extends javax.swing.JFrame {

    private static Connection con = null;
    private static Statement stmt = null;
    private static String url = "jdbc:mysql://localhost:3306/login_register?useUnicode=true&useLegacyDatetimeCode=false&serverTimezone=Turkey";
    private static final String USER = "root";
    private static final String PASS = "root";

    /**
     * Creates new form Jukebox
     */
    String[] songNames = new String[LibraryData.getSize() + 1];
    String[] songTypes = new String[LibraryData.getSize() + 1];
    String[] songArtist = new String[LibraryData.getSize() + 1];
    String[] selectedType = new String[LibraryData.getSize() + 1];

    ArrayList<Song> songs = new ArrayList<>();
    java.awt.event.ActionEvent evt;
    AudioStream music;

    public Jukebox() {
        initComponents();
        setLocationRelativeTo(null);
        showSongsInTable();
        showSongsInPlaylist();
        songNameComboBoxActionPerformed(evt);
        typeComboBoxActionPerformed(evt);
        artistComboBoxActionPerformed(evt);
        typeComboBox2ActionPerformed(evt);
        artistComboBox2ActionPerformed(evt);
        songNameComboBox2ActionPerformed(evt);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        libraryPanel = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        playSongButton = new javax.swing.JButton();
        addToPlaylistButton = new javax.swing.JButton();
        addNewSongButton = new javax.swing.JButton();
        deleteSongButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        libraryTable = new javax.swing.JTable();
        typeComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        artistComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        songNameComboBox = new javax.swing.JComboBox<>();
        pauseButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        showSelectedSongButton = new javax.swing.JButton();
        showAllSongsButton = new javax.swing.JButton();
        songNameLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        exitLabel = new javax.swing.JLabel();
        logOutLabel = new javax.swing.JLabel();
        artistLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        playSongButton2 = new javax.swing.JButton();
        removeFromPlaylistButton = new javax.swing.JButton();
        clearPlaylistButton = new javax.swing.JButton();
        playAllButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        playlistTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        typeComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        artistComboBox2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        songNameComboBox2 = new javax.swing.JComboBox<>();
        pauseButton2 = new javax.swing.JButton();
        stopButton2 = new javax.swing.JButton();
        restartButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        songName2Label = new javax.swing.JLabel();
        state2Label = new javax.swing.JLabel();
        exitLabel2 = new javax.swing.JLabel();
        showSelectedSong2Button = new javax.swing.JButton();
        showAllSongs2Button = new javax.swing.JButton();
        artistLabel2 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        exitlabel = new javax.swing.JLabel();
        logoutLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 255));

        libraryPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        libraryPanel.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        libraryPanel.setMinimumSize(new java.awt.Dimension(386, 23));
        libraryPanel.setName("Song Library"); // NOI18N
        libraryPanel.setPreferredSize(new java.awt.Dimension(800, 800));

        jPanel1.setBackground(new java.awt.Color(255, 0, 51));

        jPanel3.setBackground(new java.awt.Color(255, 0, 51));
        jPanel3.setPreferredSize(new java.awt.Dimension(700, 700));

        playSongButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        playSongButton.setText("Play Song");
        playSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSongButtonActionPerformed(evt);
            }
        });

        addToPlaylistButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        addToPlaylistButton.setText("Add to Playlist");
        addToPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToPlaylistButtonActionPerformed(evt);
            }
        });

        addNewSongButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        addNewSongButton.setText("Add New Song");
        addNewSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewSongButtonActionPerformed(evt);
            }
        });

        deleteSongButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        deleteSongButton.setText("Delete Song");
        deleteSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSongButtonActionPerformed(evt);
            }
        });

        libraryTable.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        libraryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Artist", "Song Name"
            }
        ));
        libraryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libraryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(libraryTable);

        typeComboBox.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        typeComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                typeComboBoxMouseClicked(evt);
            }
        });
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Type :");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Artist:");

        artistComboBox.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        artistComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        artistComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Song Name:");

        songNameComboBox.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        songNameComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        songNameComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songNameComboBoxMouseClicked(evt);
            }
        });
        songNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songNameComboBoxActionPerformed(evt);
            }
        });

        pauseButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        stopButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        restartButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        showSelectedSongButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        showSelectedSongButton.setText("Show Selected Song");
        showSelectedSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSelectedSongButtonActionPerformed(evt);
            }
        });

        showAllSongsButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        showAllSongsButton.setText("Show All Songs");
        showAllSongsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllSongsButtonActionPerformed(evt);
            }
        });

        songNameLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        stateLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        exitLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabelMouseClicked(evt);
            }
        });

        logOutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logOutLabelMouseClicked(evt);
            }
        });

        artistLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/10012-smiling-face-with-sunglasses-icon.png"))); // NOI18N

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logout32.png"))); // NOI18N
        jLabel11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel11MouseClicked(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit32.png"))); // NOI18N
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(logOutLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(exitLabel)
                                .addGap(53, 53, 53))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(32, 32, 32)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(stateLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(songNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(stopButton, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(restartButton, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(artistLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(62, 62, 62))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pauseButton)
                                    .addComponent(playSongButton))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(7, 7, 7)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel2))
                            .addComponent(addNewSongButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(148, 148, 148)
                                .addComponent(songNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(62, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(deleteSongButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8)
                                .addGap(35, 35, 35))))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(addToPlaylistButton)
                .addGap(43, 43, 43)
                .addComponent(showSelectedSongButton)
                .addGap(29, 29, 29)
                .addComponent(showAllSongsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addToPlaylistButton)
                            .addComponent(showSelectedSongButton)
                            .addComponent(showAllSongsButton))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteSongButton)
                            .addComponent(addNewSongButton)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(artistLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(songNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(playSongButton)
                                .addGap(18, 18, 18)
                                .addComponent(pauseButton)
                                .addGap(18, 18, 18)
                                .addComponent(stopButton)
                                .addGap(18, 18, 18)
                                .addComponent(restartButton))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(logOutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel11))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(exitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(artistComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(songNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addGap(81, 81, 81))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        libraryPanel.addTab("Song Library", jPanel1);

        jPanel2.setBackground(new java.awt.Color(255, 0, 51));

        playSongButton2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        playSongButton2.setText("Play Song");
        playSongButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSongButton2ActionPerformed(evt);
            }
        });

        removeFromPlaylistButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        removeFromPlaylistButton.setText("Remove From Playlist");
        removeFromPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromPlaylistButtonActionPerformed(evt);
            }
        });

        clearPlaylistButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        clearPlaylistButton.setText("Clear Playlist");
        clearPlaylistButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlaylistButtonActionPerformed(evt);
            }
        });

        playAllButton.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        playAllButton.setText("Play All Songs");
        playAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAllButtonActionPerformed(evt);
            }
        });

        playlistTable.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        playlistTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Artist", "Song Name"
            }
        ));
        playlistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                playlistTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(playlistTable);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Type:");

        typeComboBox2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        typeComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        typeComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBox2ActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Artist:");

        artistComboBox2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        artistComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        artistComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artistComboBox2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Song Name:");

        songNameComboBox2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        songNameComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));
        songNameComboBox2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                songNameComboBox2MouseClicked(evt);
            }
        });
        songNameComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                songNameComboBox2ActionPerformed(evt);
            }
        });

        pauseButton2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        pauseButton2.setText("Pause");
        pauseButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButton2ActionPerformed(evt);
            }
        });

        stopButton2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        stopButton2.setText("Stop");
        stopButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButton2ActionPerformed(evt);
            }
        });

        restartButton2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        restartButton2.setText("Restart");
        restartButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButton2ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
        jLabel7.setName(""); // NOI18N

        songName2Label.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        state2Label.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        exitLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitLabel2MouseClicked(evt);
            }
        });

        showSelectedSong2Button.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        showSelectedSong2Button.setText("Show Selected Song");
        showSelectedSong2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSelectedSong2ButtonActionPerformed(evt);
            }
        });

        showAllSongs2Button.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        showAllSongs2Button.setText("Show All Songs");
        showAllSongs2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllSongs2ButtonActionPerformed(evt);
            }
        });

        artistLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/10011-face-savoring-food-icon.png"))); // NOI18N

        exitlabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/exit32.png"))); // NOI18N
        exitlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitlabelMouseClicked(evt);
            }
        });

        logoutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/logout32.png"))); // NOI18N
        logoutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(playAllButton)
                .addGap(18, 18, 18)
                .addComponent(removeFromPlaylistButton)
                .addGap(18, 18, 18)
                .addComponent(clearPlaylistButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jLabel10)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(exitLabel2)
                .addGap(324, 324, 324))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(28, 28, 28))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(logoutLabel)
                                .addGap(18, 18, 18)
                                .addComponent(exitlabel)
                                .addGap(39, 39, 39)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pauseButton2)
                            .addComponent(stopButton2)
                            .addComponent(restartButton2)
                            .addComponent(songName2Label, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                            .addComponent(state2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playSongButton2)
                            .addComponent(artistLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(showSelectedSong2Button)
                        .addGap(58, 58, 58)
                        .addComponent(showAllSongs2Button))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(artistComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addComponent(songNameComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playAllButton)
                            .addComponent(removeFromPlaylistButton)
                            .addComponent(clearPlaylistButton)))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showAllSongs2Button)
                    .addComponent(showSelectedSong2Button))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(artistLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(songName2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(state2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(playSongButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pauseButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(restartButton2)
                        .addGap(56, 56, 56)
                        .addComponent(exitLabel2)
                        .addGap(8, 8, 8))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(songNameComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(artistComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(typeComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(logoutLabel)
                            .addComponent(exitlabel))
                        .addContainerGap(16, Short.MAX_VALUE))))
        );

        libraryPanel.addTab("Playlist", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(libraryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 686, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(libraryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
        );

        libraryPanel.getAccessibleContext().setAccessibleName("Song Library");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    protected void play(String fileName) {

        String songPath = "C:\\Users\\Hp\\Desktop\\HW\\2019-2020-Spring\\SE2224\\Final Project-Jukebox\\Project\\audio\\" + fileName + ".wav";
        try {
            InputStream getmusic = new FileInputStream(songPath);
            AudioStream audios = new AudioStream(getmusic);
            AudioPlayer.player.start(audios);
            music = audios;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void pause() {
        try {
            AudioPlayer.player.stop(music);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    public void resume() {
        try {
            AudioPlayer.player.start(music);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }


    private void playSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSongButtonActionPerformed
        pauseButton.setEnabled(true);
        playSongButton.setEnabled(false);
        stopButton.setEnabled(true);
        restartButton.setEnabled(false);
        if (playSongButton.getText().equals("Resume")) {
            stateLabel.setText("is Playing...");
            resume();
        } else {
            int id = libraryTable.getSelectedRow();
            String name = libraryTable.getValueAt(id, 2).toString();
            String artist = libraryTable.getValueAt(id, 1).toString();
            play(name);
            artistLabel.setText(artist);
            songNameLabel.setText(name);
            stateLabel.setText("is Playing...");
        }
    }//GEN-LAST:event_playSongButtonActionPerformed

    private void playAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAllButtonActionPerformed
        JOptionPane.showMessageDialog(null, "<html>You Clicked Play All Songs Button. <br>All Songs In Playlist<br> Will Play Once For 10 Seconds Per Song.</html>");
        stopButton2.setEnabled(true);
        pauseButton2.setEnabled(true);
        playSongButton2.setEnabled(false);
        String[] allSongs;
        allSongs = ManagePlaylist.playAll();
        for (int k = 0; k < allSongs.length - 1; k++) {
            songName2Label.setText(allSongs[k]);
            play(allSongs[k]);
            try {
                TimeUnit.SECONDS.sleep(10);
                pause();
                stopButton2ActionPerformed(evt);
            } catch (InterruptedException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
        }
    }//GEN-LAST:event_playAllButtonActionPerformed

    private void clearPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlaylistButtonActionPerformed
        ManagePlaylist.clearList();
        JOptionPane.showMessageDialog(null, "Playlist Cleared");
        this.dispose();
        Jukebox menu = new Jukebox();
        menu.setVisible(true);
    }//GEN-LAST:event_clearPlaylistButtonActionPerformed

    private void removeFromPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromPlaylistButtonActionPerformed
        int id = playlistTable.getSelectedRow();
        if (id != -1) {
            String name = playlistTable.getValueAt(id, 2).toString();
            id = ManagePlaylist.getID(name);
            String key = String.valueOf(id);
            ManagePlaylist.removeSong(key);
            this.dispose();
            Jukebox menu = new Jukebox();
            menu.setVisible(true);
        } else
            JOptionPane.showMessageDialog(null, "Error, please select a valid track");
    }//GEN-LAST:event_removeFromPlaylistButtonActionPerformed

    private void addToPlaylistButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToPlaylistButtonActionPerformed
        int id = libraryTable.getSelectedRow();
        if (id != -1) {
            String name = libraryTable.getValueAt(id, 2).toString();
            id = LibraryData.getID(name);
            String key = String.valueOf(id);

            ManagePlaylist.addSong(key);
            showSongsInPlaylist();
            Jukebox menu = new Jukebox();
            menu.setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(null, "Error, please select a valid track ");
        }

        typeComboBox2ActionPerformed(evt);
        artistComboBox2ActionPerformed(evt);
        songNameComboBox2ActionPerformed(evt);
    }//GEN-LAST:event_addToPlaylistButtonActionPerformed

    private void addNewSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewSongButtonActionPerformed
        newSong menu = new newSong();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_addNewSongButtonActionPerformed

    private void deleteSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSongButtonActionPerformed
        int id = libraryTable.getSelectedRow();
        if (id != -1) {
            String name = libraryTable.getValueAt(id, 2).toString();
            id = LibraryData.getID(name);
            String key = String.valueOf(id);
            try {
                String query = "Delete from librarytable where id = " + id + "";
                con = DriverManager.getConnection(url, "root", "root");
                stmt = con.prepareStatement(query);
                stmt.executeUpdate(query);
                this.dispose();
                Jukebox menu = new Jukebox();
                menu.setVisible(true);
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
            }
    }//GEN-LAST:event_deleteSongButtonActionPerformed
    }
    private void playSongButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSongButton2ActionPerformed
        pauseButton2.setEnabled(true);
        playSongButton2.setEnabled(false);
        stopButton2.setEnabled(true);
        restartButton2.setEnabled(false);
        if (playSongButton2.getText().equals("Resume")) {
            resume();
            state2Label.setText("is Playing...");
        } else {
            int id = playlistTable.getSelectedRow();
            String name = playlistTable.getValueAt(id, 2).toString();
            String artist = playlistTable.getValueAt(id, 1).toString();
            play(name);
            artistLabel2.setText(artist);
            songName2Label.setText(name);
            state2Label.setText("is Playing...");
    }//GEN-LAST:event_playSongButton2ActionPerformed
    }
    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        songTypes = LibraryData.listType();
        for (int i = 0; i < songTypes.length; i++) {
            typeComboBox.addItem(songTypes[i]);
        }
    }//GEN-LAST:event_typeComboBoxActionPerformed


    private void songNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songNameComboBoxActionPerformed
        songNames = LibraryData.listSongNames();
        for (int i = 0; i < songNames.length; i++) {
            songNameComboBox.addItem(songNames[i]);
        }
    }//GEN-LAST:event_songNameComboBoxActionPerformed

    private void libraryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libraryTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) libraryTable.getModel();
        int selectedRow = libraryTable.getSelectedRow();
        typeComboBox.setSelectedItem(model.getValueAt(selectedRow, 0).toString());
        artistComboBox.setSelectedItem(model.getValueAt(selectedRow, 1).toString());
        songNameComboBox.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
    }//GEN-LAST:event_libraryTableMouseClicked

    private void songNameComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songNameComboBoxMouseClicked
    }//GEN-LAST:event_songNameComboBoxMouseClicked

    private void artistComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistComboBoxActionPerformed
        songArtist = LibraryData.listArtist();
        for (int i = 0; i < songArtist.length; i++) {
            artistComboBox.addItem(songArtist[i]);
        }
    }//GEN-LAST:event_artistComboBoxActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        playSongButton.setEnabled(true);
        pauseButton.setEnabled(false);
        stopButton.setEnabled(false);
        restartButton.setEnabled(true);
        playSongButton.setText("Play Song");
        pause();
        stateLabel.setText("is Stopped...");
    }//GEN-LAST:event_stopButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        pauseButton.setEnabled(false);
        playSongButton.setText("Resume");
        playSongButton.setEnabled(true);
        restartButton.setEnabled(true);
        pause();
        stateLabel.setText("is Paused...");
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        playSongButton.setEnabled(false);
        pauseButton.setEnabled(true);
        stopButton.setEnabled(true);
        int id = libraryTable.getSelectedRow();
        String name = libraryTable.getValueAt(id, 2).toString();
        play(name);
        playSongButton.setText("Play Song");
        stateLabel.setText("is Playing...");
    }//GEN-LAST:event_restartButtonActionPerformed

    private void artistComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artistComboBox2ActionPerformed
        songArtist = ManagePlaylist.listArtist();
        for (int i = 0; i < songArtist.length; i++) {
            artistComboBox2.addItem(songArtist[i]);
        }
    }//GEN-LAST:event_artistComboBox2ActionPerformed

    private void songNameComboBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_songNameComboBox2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_songNameComboBox2MouseClicked

    private void songNameComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_songNameComboBox2ActionPerformed
        songNames = ManagePlaylist.listSongNames();
        for (int i = 0; i < songNames.length; i++) {
            songNameComboBox2.addItem(songNames[i]);
        }
    }//GEN-LAST:event_songNameComboBox2ActionPerformed

    private void pauseButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButton2ActionPerformed
        pauseButton2.setEnabled(false);
        playSongButton2.setText("Resume");
        playSongButton2.setEnabled(true);
        restartButton2.setEnabled(true);
        pause();
        state2Label.setText("is Paused...");
    }//GEN-LAST:event_pauseButton2ActionPerformed

    private void stopButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButton2ActionPerformed
        playSongButton2.setEnabled(true);
        pauseButton2.setEnabled(false);
        stopButton2.setEnabled(false);
        restartButton2.setEnabled(true);
        playSongButton2.setText("Play Song");
        pause();
        state2Label.setText("is Stopped...");
    }//GEN-LAST:event_stopButton2ActionPerformed

    private void restartButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButton2ActionPerformed
        playSongButton2.setEnabled(false);
        pauseButton2.setEnabled(true);
        stopButton2.setEnabled(true);
        int id = playlistTable.getSelectedRow();
        String name = playlistTable.getValueAt(id, 2).toString();
        play(name);
        playSongButton2.setText("Play Song");
        state2Label.setText("is Playing...");
    }//GEN-LAST:event_restartButton2ActionPerformed

    private void typeComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBox2ActionPerformed
        songTypes = ManagePlaylist.listType();
        for (int i = 0; i < songTypes.length; i++) {
            typeComboBox2.addItem(songTypes[i]);
        }
    }//GEN-LAST:event_typeComboBox2ActionPerformed

    private void playlistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_playlistTableMouseClicked
        DefaultTableModel model = (DefaultTableModel) playlistTable.getModel();
        int selectedRow = playlistTable.getSelectedRow();
        typeComboBox2.setSelectedItem(model.getValueAt(selectedRow, 0).toString());
        artistComboBox2.setSelectedItem(model.getValueAt(selectedRow, 1).toString());
        songNameComboBox2.setSelectedItem(model.getValueAt(selectedRow, 2).toString());
    }//GEN-LAST:event_playlistTableMouseClicked

    private void typeComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_typeComboBoxMouseClicked
    }//GEN-LAST:event_typeComboBoxMouseClicked

    private void showSelectedSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSelectedSongButtonActionPerformed
        clearTable();
        showSelectedSongs();
    }//GEN-LAST:event_showSelectedSongButtonActionPerformed

    private void showAllSongsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllSongsButtonActionPerformed
        clearTable();
        showSongsInTable();
    }//GEN-LAST:event_showAllSongsButtonActionPerformed

    private void exitLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabelMouseClicked
    }//GEN-LAST:event_exitLabelMouseClicked

    private void logOutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logOutLabelMouseClicked
    }//GEN-LAST:event_logOutLabelMouseClicked

    private void exitLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitLabel2MouseClicked
    }//GEN-LAST:event_exitLabel2MouseClicked

    private void showSelectedSong2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSelectedSong2ButtonActionPerformed
        clearPlaylist();
        showSelectedSongsPlaylist();;
    }//GEN-LAST:event_showSelectedSong2ButtonActionPerformed

    private void showAllSongs2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllSongs2ButtonActionPerformed
        clearPlaylist();
        showSongsInPlaylist();
    }//GEN-LAST:event_showAllSongs2ButtonActionPerformed

    private void logoutLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutLabelMouseClicked
        ManagePlaylist.clearList();
        logInScreen menu = new logInScreen();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_logoutLabelMouseClicked

    private void exitlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitlabelMouseClicked
        ManagePlaylist.clearList();
        System.exit(0);
    }//GEN-LAST:event_exitlabelMouseClicked

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        ManagePlaylist.clearList();
        System.exit(0);
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseClicked
        ManagePlaylist.clearList();
        logInScreen menu = new logInScreen();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel11MouseClicked

    public void clearTable() {
        DefaultTableModel dm = (DefaultTableModel) libraryTable.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    public void clearPlaylist() {
        DefaultTableModel dm = (DefaultTableModel) playlistTable.getModel();
        int rowCount = dm.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            dm.removeRow(i);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jukebox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jukebox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jukebox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jukebox.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jukebox().setVisible(true);
            }
        });
    }

    public ArrayList<Song> setSelectedSongsTable() {
        String type = typeComboBox.getSelectedItem().toString();
        String artist = artistComboBox.getSelectedItem().toString();
        String name = songNameComboBox.getSelectedItem().toString();
        PreparedStatement statement;
        ArrayList<Song> songs = new ArrayList<>();
        try {
            con = DriverManager.getConnection(url, USER, PASS);
            String query = "Select * from librarytable where type=? or artist =? or name =?";
            statement = con.prepareStatement(query);
            statement.setString(1, type);
            statement.setString(2, artist);
            statement.setString(3, name);
            ResultSet rs = statement.executeQuery();
            Song song;
            while (rs.next()) {
                song = new Song(rs.getString("type"), rs.getString("artist"), rs.getString("name"));
                songs.add(song);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return songs;
    }

    public ArrayList<Song> setSelectedSongsPlaylist() {
        String type = typeComboBox2.getSelectedItem().toString();
        String artist = artistComboBox2.getSelectedItem().toString();
        String name = songNameComboBox2.getSelectedItem().toString();
        PreparedStatement statement;
        ArrayList<Song> songs = new ArrayList<>();
        try {
            con = DriverManager.getConnection(url, USER, PASS);
            String query = "Select * from playlisttable where type=? or artist =? or name =?";
            statement = con.prepareStatement(query);
            statement.setString(1, type);
            statement.setString(2, artist);
            statement.setString(3, name);
            ResultSet rs = statement.executeQuery();
            Song song;
            while (rs.next()) {
                song = new Song(rs.getString("type"), rs.getString("artist"), rs.getString("name"));
                songs.add(song);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return songs;
    }

    public void showSelectedSongsPlaylist() {
        ArrayList<Song> songs = setSelectedSongsPlaylist();
        DefaultTableModel model = (DefaultTableModel) playlistTable.getModel();
        Object[] row = new Object[10];
        for (int i = 0; i < songs.size(); i++) {
            row[0] = songs.get(i).getType();
            row[1] = songs.get(i).getArtist();
            row[2] = songs.get(i).getName();
            model.addRow(row);
        }
    }

    public void showSelectedSongs() {
        ArrayList<Song> songs = setSelectedSongsTable();
        DefaultTableModel model = (DefaultTableModel) libraryTable.getModel();
        Object[] row = new Object[10];
        for (int i = 0; i < songs.size(); i++) {
            row[0] = songs.get(i).getType();
            row[1] = songs.get(i).getArtist();
            row[2] = songs.get(i).getName();
            model.addRow(row);
        }
    }

    public ArrayList<Song> setTableData() {
        ArrayList<Song> songs = new ArrayList<>();
        try {
            con = DriverManager.getConnection(url, USER, PASS);
            String query = "Select * from librarytable";
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            Song song;
            while (rs.next()) {
                song = new Song(rs.getString("type"), rs.getString("artist"), rs.getString("name"));
                songs.add(song);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return songs;
    }

    public void showSongsInTable() {
        ArrayList<Song> songs = setTableData();
        DefaultTableModel model = (DefaultTableModel) libraryTable.getModel();
        Object[] row = new Object[7];
        for (int i = 0; i < songs.size(); i++) {
            row[0] = songs.get(i).getType();
            row[1] = songs.get(i).getArtist();
            row[2] = songs.get(i).getName();
            model.addRow(row);
        }
    }

    public ArrayList<Song> setPlaylistData() {
        ArrayList<Song> songs = new ArrayList<>();
        try {
            con = DriverManager.getConnection(url, USER, PASS);
            String query = "Select * from playlisttable";
            stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            Song song;
            while (rs.next()) {
                song = new Song(rs.getString("type"), rs.getString("artist"), rs.getString("name"));
                songs.add(song);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return songs;
    }

    public void showSongsInPlaylist() {
        ArrayList<Song> songs = setPlaylistData();
        DefaultTableModel model = (DefaultTableModel) playlistTable.getModel();
        Object[] row = new Object[7];

        for (int i = 0; i < songs.size(); i++) {
            row[0] = songs.get(i).getType();
            row[1] = songs.get(i).getArtist();
            row[2] = songs.get(i).getName();
            model.addRow(row);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewSongButton;
    private javax.swing.JButton addToPlaylistButton;
    private javax.swing.JComboBox<String> artistComboBox;
    private javax.swing.JComboBox<String> artistComboBox2;
    private javax.swing.JLabel artistLabel;
    private javax.swing.JLabel artistLabel2;
    private javax.swing.JButton clearPlaylistButton;
    private javax.swing.JButton deleteSongButton;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JLabel exitLabel2;
    private javax.swing.JLabel exitlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane libraryPanel;
    private javax.swing.JTable libraryTable;
    private javax.swing.JLabel logOutLabel;
    private javax.swing.JLabel logoutLabel;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton pauseButton2;
    private javax.swing.JButton playAllButton;
    private javax.swing.JButton playSongButton;
    private javax.swing.JButton playSongButton2;
    private javax.swing.JTable playlistTable;
    private javax.swing.JButton removeFromPlaylistButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton restartButton2;
    private javax.swing.JButton showAllSongs2Button;
    private javax.swing.JButton showAllSongsButton;
    private javax.swing.JButton showSelectedSong2Button;
    private javax.swing.JButton showSelectedSongButton;
    private javax.swing.JLabel songName2Label;
    private javax.swing.JComboBox<String> songNameComboBox;
    private javax.swing.JComboBox<String> songNameComboBox2;
    private javax.swing.JLabel songNameLabel;
    private javax.swing.JLabel state2Label;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JButton stopButton;
    private javax.swing.JButton stopButton2;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JComboBox<String> typeComboBox2;
    // End of variables declaration//GEN-END:variables
}
